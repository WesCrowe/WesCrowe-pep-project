package DAO;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import Model.Message;
import Util.ConnectionUtil;

/**
 * A DAO is a class that mediates the transformation of data between the format of 
 * objects in Java to rows in a database.
 * 
 * Table "Message"
 * message_id integer primary key auto_increment,
 * posted_by integer,
 * message_text varchar(255),
 * time_posted_epoch long,
 * foreign key (posted_by) references Account(account_id)
 */
public class MessageDAO {

    /* TODO: is this dangerous? */
    AccountDAO accountDAO;
    public MessageDAO(){
        this.accountDAO = new AccountDAO();
    }

    /**
     * Retrieve all messages from the Message table.
     *
     * @return all messages.
     */
    public List<Message> getAllMessages(){
        Connection connection = ConnectionUtil.getConnection();
        List<Message> messages = new ArrayList<>();
        try {
            //SQL query
            String sql = "SELECT * FROM Message;";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            //execute the query
            ResultSet rs = preparedStatement.executeQuery();
            
            //iterate through results, adding each message to the list
            while(rs.next()){
                Message message = new Message(rs.getInt("message_id"), rs.getInt("posted_by"),
                        rs.getString("message_text"), rs.getLong("time_posted_epoch"));
                messages.add(message);
            }
        }
        catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return messages;
    }

    /**
     * TODO: Retrieve a specific message using its message ID.
     *
     * @param id a message ID.
     */
    public Message getMessageById(int id){
        Connection connection = ConnectionUtil.getConnection();
        try {
            //SQL query
            String sql = "SELECT * FROM Message WHERE Message.message_id=?;";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            //set the id
            preparedStatement.setInt(1, id);

            //execute the query
            ResultSet rs = preparedStatement.executeQuery();

            //iterate through the results, returning the message
            while(rs.next()){
                Message message = new Message(rs.getInt("message_id"), rs.getInt("posted_by"),
                        rs.getString("message_text"), rs.getLong("time_posted_epoch"));
                return message;
            }
        }
        catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }

    /**
     * Add a message record into the database which matches the values contained in the message object.
     * The message_id will be automatically generated by the SQL database, and JDBC will be able
     * to retrieve the generated ID automatically.
     *
     * @param Message an object modelling a message. the Message object does not contain an message ID.
     */
    public Message insertMessage(Message message){
        Connection connection = ConnectionUtil.getConnection();

        //message_text is not blank,
        //is under 255 characters,
        //and posted_by refers to a real, existing user.
        if (message.getMessage_text() != "" &&
            message.getMessage_text().length() < 255 &&
            accountDAO.getAccountById(message.getPosted_by()) != null){
           try {
                //Write SQL logic here. When inserting, you only need to define the departure_city and arrival_city
                //values (two columns total!)
                String sql = "INSERT INTO Message (posted_by, message_text, time_posted_epoch) VALUES (?, ?, ?);";
                PreparedStatement preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

                //set the posted_by, message_text, and time_posted_epoch
                preparedStatement.setInt(1, message.getPosted_by());
                preparedStatement.setString(2, message.getMessage_text());
                preparedStatement.setLong(3, message.getTime_posted_epoch());

                preparedStatement.executeUpdate();
                ResultSet pkeyResultSet = preparedStatement.getGeneratedKeys();
                if(pkeyResultSet.next()){
                    int generated_message_id = (int) pkeyResultSet.getLong(1);
                    return new Message(generated_message_id, message.getPosted_by(), message.getMessage_text(), message.getTime_posted_epoch());
                }
            }
            catch(SQLException e){
                System.out.println(e.getMessage());
            }
        }
        return null;
    }


    /**
     * TODO: Update the message identified by the message id to the values contained in the message object.
     *
     * @param id a message ID.
     * @param message a message object. the message object does not contain a message ID.
     */
    public void updateMessage(int id, Message message){
        Connection connection = ConnectionUtil.getConnection();
        try {
            //Write SQL logic here
            String sql = "UPDATE Account SET message_text=?, time_posted_epoch=? WHERE Message.message_id = ?;";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            //Set the message_text, time_posted_epoch, and id
            preparedStatement.setString(1, message.getMessage_text());
            preparedStatement.setLong(2, message.getTime_posted_epoch());
            preparedStatement.setInt(3, id);

            preparedStatement.executeUpdate();
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
    }

    /**
     * TODO: delete a message identified by the message id.
     *
     * @param id a message ID.
     */
    public Message deleteMessage(int id){
        Connection connection = ConnectionUtil.getConnection();
        try {
            //SQL Query
            String sql = "DELETE FROM Message WHERE Message.message_id=?;";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            //Set the id
            preparedStatement.setInt(1, id);

            //execute the query
            ResultSet rs = preparedStatement.executeQuery();

            //iterate through the result, returning the deleted message
            while(rs.next()){
                Message message = new Message(rs.getInt("message_id"), rs.getInt("posted_by"),
                        rs.getString("message_text"), rs.getLong("time_posted_epoch"));
                return message;
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }

    /**
     * TODO: Retrieve all messages from the Message table given a posted_by id.
     *
     * @return all messages posted by the user with id that matches posted_by.
     */
    public List<Message> getAllMessagesPostedBy(int posted_by){
        Connection connection = ConnectionUtil.getConnection();
        List<Message> messages = new ArrayList<>();
        try {
            //SQL query
            String sql = "SELECT * FROM Message WHERE Message.posted_by=?;";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            //set the posted_by
            preparedStatement.setInt(1, posted_by);

            //execute the query
            ResultSet rs = preparedStatement.executeQuery();
            
            //iterate through results, adding each message to the list
            while(rs.next()){
                Message message = new Message(rs.getInt("message_id"), rs.getInt("posted_by"),
                        rs.getString("message_text"), rs.getLong("time_posted_epoch"));
                messages.add(message);
            }
        }
        catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return messages;
    }
}
